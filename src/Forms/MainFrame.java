package Forms;

import Classes.*;
import Handler.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.time.*;
import java.util.*;
import javax.swing.*;



/**
 * The MainFrame of the application and the central source of the project
 * @author patricia
 */
public class MainFrame extends javax.swing.JFrame {

    public AppointmentHandler AppointmentHandler = new AppointmentHandler();
    public DatabaseHandler dbhandler = new DatabaseHandler();
    private User user;
    private ArrayList<Appointment> usersEvents = null;
    private Appointment selectedEvent = null;
    private Date DayBeforeSwitch = null;
    private Date today = null;
    private static MainFrame mainFrame = new MainFrame();
    private int[] priorities = new int[3];

    /**
     *  An instance of the MainFrame will be called.
     */
    public static MainFrame getObject() {
        return mainFrame;
    }
    /**
     * Contructor of the MainFrame
     */
    private MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPHead = new javax.swing.JPanel();
        jLTimeLine = new javax.swing.JLabel();
        button_weeksEvents = new javax.swing.JButton();
        button_monthsEvents = new javax.swing.JButton();
        button_dayEvents = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jBLogOut = new javax.swing.JButton();
        jBOpenAccountSettings = new javax.swing.JButton();
        jBAdminInterFace = new javax.swing.JButton();
        Head = new javax.swing.JPanel();
        button_download = new javax.swing.JButton();
        jLWeekly = new javax.swing.JLabel();
        Center = new javax.swing.JPanel();
        AppointmentPanel = new javax.swing.JPanel();
        MascotLabel = new javax.swing.JLabel();
        jPTopRight = new javax.swing.JPanel();
        UserInteractionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jBEditAnEvent = new javax.swing.JButton();
        jBAddAnEvent = new javax.swing.JButton();
        TablePanel = new javax.swing.JPanel();
        MeetingPanel = new javax.swing.JPanel();
        jLUrgent = new javax.swing.JLabel();
        jLUrgentMeetings = new javax.swing.JLabel();
        jLNotSoUrgentMeetings = new javax.swing.JLabel();
        jLNotSoUrgent = new javax.swing.JLabel();
        jLEnjoyMeetings = new javax.swing.JLabel();
        jLEnjoy = new javax.swing.JLabel();
        CalendarPanel = new javax.swing.JPanel();
        jCalendar2 = new com.toedter.calendar.JCalendar();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(getExtendedState());

        jPanel1.setBackground(new java.awt.Color(196, 209, 248));

        jPHead.setBackground(new java.awt.Color(196, 209, 248));

        jLTimeLine.setBackground(new java.awt.Color(196, 209, 248));
        jLTimeLine.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jLTimeLine.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLTimeLine.setText("~TimeLine~");
        jLTimeLine.setOpaque(true);

        button_weeksEvents.setText("weekly appointments ");
        button_weeksEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_weeksEventsActionPerformed(evt);
            }
        });

        button_monthsEvents.setText("monthly appointments");
        button_monthsEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_monthsEventsActionPerformed(evt);
            }
        });

        button_dayEvents.setText("Daily Appointments");
        button_dayEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_dayEventsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPHeadLayout = new javax.swing.GroupLayout(jPHead);
        jPHead.setLayout(jPHeadLayout);
        jPHeadLayout.setHorizontalGroup(
            jPHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPHeadLayout.createSequentialGroup()
                .addComponent(jLTimeLine, javax.swing.GroupLayout.DEFAULT_SIZE, 954, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button_weeksEvents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_monthsEvents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_dayEvents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );
        jPHeadLayout.setVerticalGroup(
            jPHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPHeadLayout.createSequentialGroup()
                .addComponent(button_weeksEvents)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_monthsEvents)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_dayEvents))
            .addComponent(jLTimeLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel7.setBackground(new java.awt.Color(196, 209, 248));

        jBLogOut.setText("Logout");
        jBLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLogOutActionPerformed(evt);
            }
        });

        jBOpenAccountSettings.setText("Account Settings");
        jBOpenAccountSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBOpenAccountSettingsActionPerformed(evt);
            }
        });

        jBAdminInterFace.setText("Admin Interface");
        jBAdminInterFace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAdminInterFaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jBLogOut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jBOpenAccountSettings, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jBAdminInterFace, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jBLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBOpenAccountSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBAdminInterFace))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPHead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPHead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        Head.setBackground(new java.awt.Color(196, 209, 248));

        button_download.setText("Download as PDF");
        button_download.setToolTipText("");
        button_download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_downloadActionPerformed(evt);
            }
        });

        jLWeekly.setText("Export your Weekly Schedule as PDF here:");

        javax.swing.GroupLayout HeadLayout = new javax.swing.GroupLayout(Head);
        Head.setLayout(HeadLayout);
        HeadLayout.setHorizontalGroup(
            HeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeadLayout.createSequentialGroup()
                .addContainerGap(768, Short.MAX_VALUE)
                .addComponent(jLWeekly)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_download, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        HeadLayout.setVerticalGroup(
            HeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeadLayout.createSequentialGroup()
                .addGroup(HeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_download, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLWeekly, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 73, Short.MAX_VALUE))
        );

        getContentPane().add(Head, java.awt.BorderLayout.PAGE_END);

        AppointmentPanel.setBackground(new java.awt.Color(255, 255, 255));
        AppointmentPanel.setLayout(new java.awt.BorderLayout());

        MascotLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Mascot500x400.png"))); // NOI18N
        AppointmentPanel.add(MascotLabel, java.awt.BorderLayout.CENTER);

        UserInteractionPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Choose a Date:");

        jLabel2.setText("Edit an Appointment:");

        jLabel3.setText("Add an Appointment:");

        jDateChooser1.setDate(jCalendar2.getDate());
        jDateChooser1.setMinSelectableDate(new java.util.Date(-3600000L));
        jDateChooser1.setOpaque(false);
        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        jBEditAnEvent.setText("Edit an Appointment");
        jBEditAnEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEditAnEventActionPerformed(evt);
            }
        });

        jBAddAnEvent.setText("Add an Appointment");
        jBAddAnEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddAnEventActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UserInteractionPanelLayout = new javax.swing.GroupLayout(UserInteractionPanel);
        UserInteractionPanel.setLayout(UserInteractionPanelLayout);
        UserInteractionPanelLayout.setHorizontalGroup(
            UserInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserInteractionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UserInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBAddAnEvent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBEditAnEvent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UserInteractionPanelLayout.setVerticalGroup(
            UserInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserInteractionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UserInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBEditAnEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBAddAnEvent, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        TablePanel.setBackground(new java.awt.Color(255, 255, 255));
        TablePanel.setLayout(new java.awt.BorderLayout());

        MeetingPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLUrgent.setForeground(new java.awt.Color(255, 0, 51));
        jLUrgent.setText("You have ??? urgent ");
        jLUrgent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLUrgentMousePressed(evt);
            }
        });

        jLUrgentMeetings.setForeground(new java.awt.Color(255, 0, 51));
        jLUrgentMeetings.setText("Meetings this week");

        jLNotSoUrgentMeetings.setForeground(new java.awt.Color(255, 153, 0));
        jLNotSoUrgentMeetings.setText("Meetings this week");

        jLNotSoUrgent.setForeground(new java.awt.Color(255, 153, 0));
        jLNotSoUrgent.setText("You have ?? not so urgent");

        jLEnjoyMeetings.setForeground(new java.awt.Color(0, 153, 51));
        jLEnjoyMeetings.setText("week which you can just enjoy");

        jLEnjoy.setForeground(new java.awt.Color(0, 153, 51));
        jLEnjoy.setText("You have ??? meetings this");

        javax.swing.GroupLayout MeetingPanelLayout = new javax.swing.GroupLayout(MeetingPanel);
        MeetingPanel.setLayout(MeetingPanelLayout);
        MeetingPanelLayout.setHorizontalGroup(
            MeetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MeetingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MeetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLUrgent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLUrgentMeetings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNotSoUrgent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLNotSoUrgentMeetings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLEnjoy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLEnjoyMeetings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        MeetingPanelLayout.setVerticalGroup(
            MeetingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MeetingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLUrgent)
                .addGap(1, 1, 1)
                .addComponent(jLUrgentMeetings)
                .addGap(5, 5, 5)
                .addComponent(jLNotSoUrgent)
                .addGap(1, 1, 1)
                .addComponent(jLNotSoUrgentMeetings)
                .addGap(5, 5, 5)
                .addComponent(jLEnjoy)
                .addGap(1, 1, 1)
                .addComponent(jLEnjoyMeetings)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPTopRightLayout = new javax.swing.GroupLayout(jPTopRight);
        jPTopRight.setLayout(jPTopRightLayout);
        jPTopRightLayout.setHorizontalGroup(
            jPTopRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTopRightLayout.createSequentialGroup()
                .addComponent(UserInteractionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(MeetingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(TablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE))
        );
        jPTopRightLayout.setVerticalGroup(
            jPTopRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(UserInteractionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(MeetingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(TablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CalendarPanel.setBackground(new java.awt.Color(255, 255, 255));
        CalendarPanel.setForeground(new java.awt.Color(255, 255, 255));

        jCalendar2.setBackground(new java.awt.Color(255, 255, 255));
        jCalendar2.setAutoscrolls(true);
        jCalendar2.setFocusTraversalPolicyProvider(true);
        jCalendar2.setFont(new java.awt.Font("Lucida Console", 0, 11)); // NOI18N
        jCalendar2.setRequestFocusEnabled(false);
        jCalendar2.setTodayButtonText("");
        jCalendar2.setWeekOfYearVisible(false);
        jCalendar2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCalendar2PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout CalendarPanelLayout = new javax.swing.GroupLayout(CalendarPanel);
        CalendarPanel.setLayout(CalendarPanelLayout);
        CalendarPanelLayout.setHorizontalGroup(
            CalendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CalendarPanelLayout.createSequentialGroup()
                .addComponent(jCalendar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        CalendarPanelLayout.setVerticalGroup(
            CalendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCalendar2, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CenterLayout = new javax.swing.GroupLayout(Center);
        Center.setLayout(CenterLayout);
        CenterLayout.setHorizontalGroup(
            CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CenterLayout.createSequentialGroup()
                .addComponent(AppointmentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CalendarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPTopRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        CenterLayout.setVerticalGroup(
            CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(CenterLayout.createSequentialGroup()
                .addComponent(jPTopRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(CalendarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(AppointmentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(Center, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * The user will be logged out, when the button is clicked
     * @param evt mouse click
     */
    private void jBLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLogOutActionPerformed
        // TODO add your handling code here: logout from calendar and back to login
        Login login = new Login();
        login.setVisible(true);
        this.dispose();
        user = null;
    }//GEN-LAST:event_jBLogOutActionPerformed
    
    /**
     * Following the mouse click onto this button will lead to open the 
     * {@link Account} form to edit certain informations
     * @param evt mouse click
     */
    private void jBOpenAccountSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBOpenAccountSettingsActionPerformed
        Account Account = new Account();
        Account.setSize(750, 550);
        Account.setLocationRelativeTo(null);    
        Account.setVisible(true);

    }//GEN-LAST:event_jBOpenAccountSettingsActionPerformed
    /**
     * Following the mouse click onto this button, 
     * the {@link AdminForm} will be opened.
     * Only admins do have access to this button and it's functions.
     * @param evt mouse click
     */
    private void jBAdminInterFaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAdminInterFaceActionPerformed
        JDialog JDialog = new JDialog();
        JDialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        JDialog.add(new AdminForm(dbhandler.getAllUser()));
        JDialog.setSize(850, 625);
        JDialog.pack();
        JDialog.setLocationRelativeTo(null);
        JDialog.setVisible(true);
    }//GEN-LAST:event_jBAdminInterFaceActionPerformed
    /**
     * Button to open an empty {@link AppointmentForm} so that the user can 
     * create a new appointment.
     * @param evt mouse click
     */
    private void jBAddAnEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddAnEventActionPerformed
        showAppointment(false, true);
    }//GEN-LAST:event_jBAddAnEventActionPerformed
    /**
     * An {@link AppointmentForm} will be opened containing the information
     * regarding the selected {@link Appointment} within the {@link EventTable}.
     * @param evt mouse click
     */
    private void jBEditAnEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEditAnEventActionPerformed
        //Table Rows index is identical with the Index of the Event stored in the ArrayList usersEvents
        if (getSelectedEvent() != null) {
            if (this.user.equals(getSelectedEvent().getHost())) {
                showAppointment(true, true);
            } else {
                JOptionPane.showMessageDialog(this, "You're not the Host of this Appointment. You have no right to edit it");
            }
        }
        if (getSelectedEvent() == null)
            JOptionPane.showMessageDialog(this, "Please pick an Appointment which you want to edit!");
    }//GEN-LAST:event_jBEditAnEventActionPerformed
    /**
     * Opens an {@link AppointmentOfDayForm} containing the names of all 
     * {@link Appointment} of the chosen Date.
     * @param evt another day of the Calender has been selected
     */
    private void jCalendar2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCalendar2PropertyChange
        updateEvents();
        showEventsOfDay(jCalendar2.getDate());
    }//GEN-LAST:event_jCalendar2PropertyChange

    /**
     * Changes the Date of the Calendar depending on which {@link java.util.Date}
     * was chosen in the Datechooser
     * @param evt another {@link java.util.Date} was picked within the 
     * Datechooser.
     */
    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        Date chosenDate = jDateChooser1.getDate();
        jCalendar2.setDate(chosenDate);
    }//GEN-LAST:event_jDateChooser1PropertyChange
    /**
     * Opens a {@link JFileChooser} in which the user can choose where to 
     * store his/her weekly schedule.
     * @param evt mose click
     */
    private void button_downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_downloadActionPerformed
        ArrayList<Appointment> weeklyEvents = dbhandler.getEventOfWeek(user);
        ExportToPdfHandler.convertToPdf(weeklyEvents);
    }//GEN-LAST:event_button_downloadActionPerformed
    /**
     * shows Events of this month in the {@link EventTable}
     * @param evt mouse click
     */
    private void button_monthsEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_monthsEventsActionPerformed
        showMonthlyEvents();
    }//GEN-LAST:event_button_monthsEventsActionPerformed
    /**
     * shows Events of today in the {@link EventTable}
     * @param evt mouse click
     */
    private void button_dayEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_dayEventsActionPerformed
        showDailyEvents();
    }//GEN-LAST:event_button_dayEventsActionPerformed
    /**
     * shows urgent Events in the Table
     * @param evt mouse click
     */
    private void jLUrgentMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLUrgentMousePressed
        
    }//GEN-LAST:event_jLUrgentMousePressed
    /**
     * shows Events of this wekk in the {@link EventTable}
     * @param evt mouse click
     */
    private void button_weeksEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_weeksEventsActionPerformed
        showWeeklyEvents();
    }//GEN-LAST:event_button_weeksEventsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }
    /**
     * Adds a mouse- and keylistener to all the necessary components of the 
     * JCalendar, so that it could be individualised.
     * @param container 
     */
    private void addListenerToCalenderContent(Container container) {

        for (Component component : container.getComponents()) {
            JPanel JPanel = new JPanel();
            if (!component.getParent().getClass().equals(JPanel.getClass())) {
                component.setBackground(new java.awt.Color(196, 209, 248));
            }

            addListenerToCalenderContent((Container) component);

            component.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    setDayBefore(jCalendar2.getDate());
                    Date chosenDate = jCalendar2.getDate();
                    jDateChooser1.setDate(chosenDate);
                    if (component.getParent().getClass().equals(JPanel.getClass())) {
                        component.setBackground(new java.awt.Color(196, 209, 248));
                    }

                    if (evt.getClickCount() > 1) {
                        if (!getToday().after(chosenDate)) {

                            if (component.getParent().getClass().equals(JPanel.getClass())) {
                                component.setBackground(new java.awt.Color(196, 209, 248));
                                JDialog JDialog = new JDialog();
                                JDialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
                                JDialog.add(new AppointmentForm(false, true));
                                JDialog.setSize(864, 625);
                                JDialog.pack();
                                JDialog.setLocationRelativeTo(null);
                                JDialog.setVisible(true);
                                JDialog.requestFocusInWindow();

                                //JDialog.setSize(864, 625);
                            }
                        }
                    }

                }

                @Override
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    setDayBefore(jCalendar2.getDate());
                }
            });

            component.addKeyListener(new java.awt.event.KeyListener() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    {
                        //Instant day = jCalendar2.getDate().toInstant(); //current date
                        Instant before = getDayBefore().toInstant();
                        Instant now = jCalendar2.getDate().toInstant();
                        switch (evt.getKeyCode()) {
                            case KeyEvent.VK_DOWN -> {
                                now = before.plus(Duration.ofDays(7));
                                setDayBefore(Date.from(now));
                                jCalendar2.getYearChooser().setYear(now.atZone(ZoneId.of("Europe/Berlin")).getYear());
                                jCalendar2.setDate(Date.from(now));
                            }
                            case KeyEvent.VK_LEFT -> {
                                now = before.minus(Duration.ofDays(1));
                                setDayBefore(Date.from(now));
                                jCalendar2.getYearChooser().setYear(now.atZone(ZoneId.of("Europe/Berlin")).getYear());
                                jCalendar2.setDate(Date.from(now));
                            }
                            case KeyEvent.VK_RIGHT -> {
                                now = before.plus(Duration.ofDays(1));
                                setDayBefore(Date.from(now));
                                jCalendar2.getYearChooser().setYear(now.atZone(ZoneId.of("Europe/Berlin")).getYear());
                                jCalendar2.getYearChooser().setYear(now.atZone(ZoneId.of("Europe/Berlin")).getYear());
                                jCalendar2.setDate(Date.from(now));
                            }
                            case KeyEvent.VK_UP -> {
                                now = before.minus(Duration.ofDays(7));
                                setDayBefore(Date.from(now));
                                jCalendar2.getYearChooser().setYear(now.atZone(ZoneId.of("Europe/Berlin")).getYear());
                                jCalendar2.setDate(Date.from(now));
                            }
                            default -> {
                            }
                        }
                    }

                }

                @Override
                public void keyTyped(KeyEvent e) {

                }

                @Override
                public void keyReleased(KeyEvent e) {

                }

            });

        }

    }
    
    private void setToday(Date date) {
        this.today = date;

    }
    /**
     * returns todays date
     * @return todays {@link java.util.Date}
     */
    public Date getToday() {
        return today;
    }
    /**
     * returns the user logged into the application
     * @return the {@link User}
     */
    public User getUser() {
        return user;
    }
    /**
     * sets user using the application right now
     * @param user {@link User}
     */
    public void setUser(User user) {
        if (user != null) {
            this.user = user;
        }
        
        if(this.user.getRoleName().equals("User")){
            jBAdminInterFace.setVisible(false);
            jBAdminInterFace.setEnabled(false);
        }
        
        String welcome = "~" + this.user.getFirstname() + " " + this.user.getLastname() + "'s Timeline~";
        this.jLTimeLine.setText(welcome);
    }
    /**
     * Sets the event of the Frame depending on the {@link User} action.
     * The Default Value of these events are all future events
     * @param userEvents {@link ArrayList} of {@link Appointment}
     */
    public void setEvents(ArrayList<Appointment> userEvents) {
        this.usersEvents = userEvents;  
        TablePanel.add(new EventTable());
    }
    /**
     * Returns a list of Appointments depending on which action the user took
     * beforehand.
     * @return {@link ArrayList} of {@link Appointment}s
     */
    public ArrayList<Appointment> getEvents() {
        return usersEvents;
    }
    /**
     * gets the days of the Calender which was selected before
     * @return {@link Date}
     */
    private Date getDayBefore() {
        return DayBeforeSwitch;
    }
    /**
     * sets the {@link Date} before the Day of the Calendar has switch. 
     * Private Function for better userhandling
     * @param before {@link Date} before switchen
     */
    private void setDayBefore(Date before) {
        DayBeforeSwitch = before;
    }

    /**
     * Returns the Panel in which the {@link AppointmentForm} will be displayed
     * @return {@link JPanel} 
     */
    private JPanel getAppointmentEditorPanel() {
        return AppointmentPanel;
    }
    /**
     * Returns the Panel in which all the table Content of {@link EventTable}
     * will be displayed
     * @return {@link JPanel}
     */
    private JPanel getTablePanel() {
        return TablePanel;
    }
    /**
     * Updates the {@link EventTable}
     */
    public void updateTable() {
        getTablePanel().removeAll();
        getTablePanel().revalidate();
        getTablePanel().repaint();
        EventTable evts = new EventTable();
        getTablePanel().add(evts);
        evts.setVisible(true);
    }
    /**
     * Displays an {@link AppointmentForm} either containing information of an
     * existing {@link Appointment} or an empty form. Also the access is 
     * controlled
     * @param isAppointment {@link Boolean} true if there's an {@link Appointment}
     * which is to be edite
     * @param enabled {@link Boolean} true if the user wants to edit the form
     */
    public void showAppointment(boolean isAppointment, boolean enabled) {
        if (this.user != null) {
            getAppointmentEditorPanel().removeAll();
            getAppointmentEditorPanel().revalidate();
            getAppointmentEditorPanel().repaint();
            AppointmentForm evt = new AppointmentForm(isAppointment, enabled);
            getAppointmentEditorPanel().add(evt);
            evt.setVisible(true);
        }
    }
    /**
     * Returns the Event which is selected within the {@link EventTable}
     * @return {@link Appointment} which is selected
     */
    public Appointment getSelectedEvent() {
        return selectedEvent;
    }
    /**
     * Sets the selectedEvent to the Event which is selected within the
     * {@link EventTable}.
     * @param row 
     */
    void setSelectedEvent(int row) {
        this.selectedEvent = usersEvents.get(row);
    }
    
    /**
     * returns the Events of a certain {@link Date} which has been selected by
     * the {@link User}
     * @return an {@link ArrayList} of {@link Appointment}s
     */
    public ArrayList<Appointment> getDaysEvents() {
        Date chosenDate = jCalendar2.getDate();
        return AppointmentHandler.getEventsOfDay(usersEvents, chosenDate);
    }
    
    /**
     * sets the default configurations of the Application after the user has 
     * logged into the application successfully
     * @param user containing information of the user who has logged in
     */
    public void setConfigurations(User user) {
        setExtendedState(MainFrame.MAXIMIZED_BOTH);
        setUser(user);
        setEvents(dbhandler.getUsersEvents(getUser()));
        addListenerToCalenderContent((Container) jCalendar2.getComponent(1));
        setDayBefore(jCalendar2.getDate());
        setToday(jCalendar2.getDate());
        setUrgencies(dbhandler.getThisWeeksPriority(getUser()));   
    }

    
    /**
     * Shows all {@link Appointment} which are coming up this month within the
     * {@link EventTable}
    */
    public void showMonthlyEvents(){
        setEvents(dbhandler.getEventOfMonth(getUser()));
        updateTable();
    }
    
    /**
     * Shows all {@link Appointment} which are coming up this week within the
     * {@link EventTable}
    */
    public void showWeeklyEvents(){
        setEvents(dbhandler.getEventOfWeek(getUser()));
        updateTable();
    }
    
    /**
     * Shows all {@link Appointment} which are coming up today within the
     * {@link EventTable}
    */
    public void showDailyEvents(){
        setEvents(dbhandler.getEventsOfDay(getUser(), LocalDate.now()));
        updateTable();
    }
    
    /**
     * Updates the Events of a user, as well as the content of the 
     * {@link EventTable} whenever necessary.
     */
    public void updateEvents() {
        if(user != null){
        setEvents(dbhandler.getUsersEvents(getUser())); 
        setUrgencies(dbhandler.getThisWeeksPriority(user));
        updateTable();
        }
    }
    
    
    /**
     * returns an array which contains information about the amount of Events of
     * certain priorities
     * @param thisWeeksPriority array containing the amount of Events of its 
     * respective priority
     */
    private void setUrgencies(int[] thisWeeksPriority) {
        jLUrgent.setText("You have " + thisWeeksPriority[2] + " urgent");
        jLNotSoUrgent.setText("You have " + thisWeeksPriority[1] + " not so urgent");
        jLEnjoy.setText("You have " + thisWeeksPriority[0] + " meetings this");
    }
    
    
    /**
     * Opens an {@link AppointmentOfDayForm} which shows a {@link JList} 
     * containing all the names of {@link Appointment}s of a chosen date
     * @param date date which has been chosen 
     */
    private void showEventsOfDay(Date date) {
       Date chosenDate = jCalendar2.getDate();
        if (usersEvents != null) {
            AppointmentPanel.removeAll();
            AppointmentPanel.revalidate();
            AppointmentPanel.repaint();
            ArrayList<Appointment> DaysEvents
                    = AppointmentHandler.getEventsOfDay(usersEvents, chosenDate);

            AppointmentOfDayForm appointmentOfDay = new AppointmentOfDayForm(getDaysEvents());
            
            AppointmentPanel.add(appointmentOfDay);
            appointmentOfDay.setVisible(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AppointmentPanel;
    private javax.swing.JPanel CalendarPanel;
    private javax.swing.JPanel Center;
    private javax.swing.JPanel Head;
    private javax.swing.JLabel MascotLabel;
    private javax.swing.JPanel MeetingPanel;
    private javax.swing.JPanel TablePanel;
    private javax.swing.JPanel UserInteractionPanel;
    private javax.swing.JButton button_dayEvents;
    private javax.swing.JButton button_download;
    private javax.swing.JButton button_monthsEvents;
    private javax.swing.JButton button_weeksEvents;
    private javax.swing.JButton jBAddAnEvent;
    private javax.swing.JButton jBAdminInterFace;
    private javax.swing.JButton jBEditAnEvent;
    private javax.swing.JButton jBLogOut;
    private javax.swing.JButton jBOpenAccountSettings;
    private com.toedter.calendar.JCalendar jCalendar2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLEnjoy;
    private javax.swing.JLabel jLEnjoyMeetings;
    private javax.swing.JLabel jLNotSoUrgent;
    private javax.swing.JLabel jLNotSoUrgentMeetings;
    private javax.swing.JLabel jLTimeLine;
    private javax.swing.JLabel jLUrgent;
    private javax.swing.JLabel jLUrgentMeetings;
    private javax.swing.JLabel jLWeekly;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPHead;
    private javax.swing.JPanel jPTopRight;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    // End of variables declaration//GEN-END:variables

}
